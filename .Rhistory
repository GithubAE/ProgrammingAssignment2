getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
vec<-makeVector(1:10)
vec
vec$get
vec$get
makeVector$get(vec)
vec$get
makeVector$get(vec)
makeVector$get(vec)
makeVector$get(vec)
$get(vec)
$get(vec)
vec
vec$get()
vec$get()
vec$get()
vec$get()
vec$get()
vec$get()
vec$get()
vec$setmean()
vec$setmean(Vec$get())
vec$setmean(Vec$get())
vec$setmean(m<-Vec$get())
vec$setmean(m<-Vec$get())
vec$get()
array<-vec$get()
vec$setmean(array)
vec$getmean
vec$getmean
vec$getmean
vec$getmean
vec$getmean
vec$getmean
vec$getmean
vec$getmean
vec$getmean
vec$getmean
vec$getmean
x <-makeVector(1:10)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(x)
cachemean(x)
cachemean(x)
cachemean(x)
seq1 <- seq(1:6)
mat1 <- matrix(seq1, 3)
mat1
solve(mat1)
mat1 <-(seq1, 2)
mat1 <-matrix(seq1, 2)
mat1
seq1 <-seq(1:9)
mat1 <-matrix(seq1, 3)
mat1
solve(mat1)
solve(mat1)
solve(mat1)
solve(mat1)
solve(mat1)
seq1 <- vector(c(1,10,30,1,49,39,7,9,10))
seq1 <- vector(mode = "numeric", c(1,10,30,1,49,39,7,9,10))
seq1 <- c(1,10,30,1,49,39,7,9,10)
seq1
mat1 <-matrix(seq1, 3)
mat1
solve(mat1)
seq1 <- C(1,2,6,2,5,6,2,8,9)
seq1 <- (C(1,2,6,2,5,6,2,8,9))
seq1 <- (1,2,6,2,5,6,2,8,9)
seq1 <- (1,2,6,2,5,6,2,8,9)
seq1 <- c(1,2,6,2,5,6,2,8,9)
mat1 <-matrix(seq1, 3)
mat1
solve(mat1)
makeVector <- function(x = numeric()) {
mat <- matrix(x, 3)                     #creates the matrix
solved <- NULL                          #sets the inverse matrix to zero
set <- function(y) {                    #creates a new matrix with new input dta x
x <<- y
solved <- NULL                  #sets the inverse matrix to zero
mat <- matrix(x, 3)             #creates the matrix
}
get <- function() mat                    #gets the matrix
solvematrix <- function(solve) solved <<- solve
getSolved <- function() solved
list(set = set, get = get,
solevmatrix = solvematrix,
getSolved = getSolved)
}
cacheMatrix <- function(x, ...) {
solved <- x$getSolved()
if(!is.null(solved)) {
message("getting cached data")
return(solved)
}
data <- x$get()
m <- solve(data, ...)
x$solvematrix(solved)
solved
}
makeVector <- function(x = numeric()) {
mat <- matrix(x, 3)                     #creates the matrix
solved <- NULL                          #sets the inverse matrix to zero
set <- function(y) {                    #creates a new matrix with new input dta x
x <<- y
solved <- NULL                  #sets the inverse matrix to zero
mat <- matrix(x, 3)             #creates the matrix
}
get <- function() mat                    #gets the matrix
setinverse <- function(solve) solved <<- solve
getSolved <- function() solved
list(set = set, get = get,
solevmatrix = solvematrix,
setinverse = setinverse)
}
cacheMatrix <- function(x, ...) {
solved <- x$getSolved()
if(!is.null(solved)) {
message("getting cached data")
return(solved)
}
data <- x$get()
solved <- solve(data, ...)
x$solvematrix(solved)
solved
}
makeMatrix(c(1,2,3,4,6,6,7))
makeMatrix <- function(x = numeric()) {
mat <- matrix(x, 3)                     #creates the matrix
solved <- NULL                          #sets the inverse matrix to zero
set <- function(y) {                    #creates a new matrix with new input dta x
x <<- y
solved <- NULL                  #sets the inverse matrix to zero
mat <- matrix(x, 3)             #creates the matrix
}
get <- function() mat                    #gets the matrix
setinverse <- function(solve) solved <<- solve
getSolved <- function() solved
list(set = set, get = get,
solevmatrix = solvematrix,
setinverse = setinverse)
}
cacheMatrix <- function(x, ...) {
solved <- x$getSolved()
if(!is.null(solved)) {
message("getting cached data")
return(solved)
}
data <- x$get()
solved <- solve(data, ...)
x$solvematrix(solved)
solved
}
makeMatrix(c(1,2,3,4,6,6,7))
makeMatrix <- function(x = numeric()) {
mat <- matrix(x, 3)                     #creates the matrix
solved <- NULL                          #sets the inverse matrix to zero
set <- function(y) {                    #creates a new matrix with new input dta x
x <<- y
solved <- NULL                  #sets the inverse matrix to zero
mat <- matrix(x, 3)             #creates the matrix
}
get <- function() mat                    #gets the matrix
setinverse <- function(solve) solved <<- solve
getinverse <- function() solved
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheMatrix <- function(x, ...) {
solved <- x$getinverse()
if(!is.null(solved)) {
message("getting cached data")
return(solved)
}
data <- x$get()
solved <- solve(data, ...)
x$setinverse(solved)
solved
}
makeMatrix(c(1,2,3,4,6,6,7))
makeMatrix(c(1,2,3,4,6,6,7,8,9))
makeMatrix(c(1,2,3,4,6,6,7,8,9))
makeMatrix(c(1,2,3,4,6,6,7,8,9))
inv<-makeMatrix(c(1:9))
inv$getinverse
inv$getinverse
inv$getinverse
cacheMatrix(inv)
cacheMatrix(inv)
vec <-(c(2,3,3,7,4,2,3,5,7))
makeMatrix(vec)
makeMatrix(vec)
inv<-makeMatriX(vec)
makeMatrix <- function(x = numeric()) {
mat <- matrix(x, 3)                     #creates the matrix
solved <- NULL                          #sets the inverse matrix to zero
set <- function(y) {                    #creates a new matrix with new input dta x
x <<- y
solved <- NULL                  #sets the inverse matrix to zero
mat <- matrix(x, 3)             #creates the matrix
}
get <- function() mat                    #gets the matrix
setinverse <- function(solve) solved <<- solve
getinverse <- function() solved
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheMatrix <- function(x, ...) {
solved <- x$getinverse()
if(!is.null(solved)) {
message("getting cached data")
return(solved)
}
data <- x$get()
solved <- solve(data, ...)
x$setinverse(solved)
solved
}
inv <-makeMatrix(vec)
inv$setinverse
cacheMatrix(vec)
cacheMatrix(vec)
makeMatrix <- function(x = numeric()) {
mat <<- matrix(x, 3)                     #creates the matrix
solved <- NULL                          #sets the inverse matrix to zero
set <- function(y) {                    #creates a new matrix with new input dta x
x <<- y
solved <- NULL                  #sets the inverse matrix to zero
mat <- matrix(x, 3)             #creates the matrix
}
get <- function() mat                    #gets the matrix
setinverse <- function(solve) solved <<- solve
getinverse <- function() solved
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
(v)
cacheMatrix <- function(x, ...) {
solved <- x$getinverse()
if(!is.null(solved)) {
message("getting cached data")
return(solved)
}
data <- x$get()
solved <- solve(data, ...)
x$setinverse(solved)
solved
}
inv <-makeMatrix(vec)
cacheMatrix(mat)
makeMatrix <- function(x = numeric()) {
mat <<- matrix(x, 3)                     #creates the matrix
solved <- NULL                          #sets the inverse matrix to zero
set <- function(y) {                    #creates a new matrix with new input dta x
x <<- y
solved <- NULL                  #sets the inverse matrix to zero
mat <- matrix(x, 3)             #creates the matrix
}
get <- function() mat                    #gets the matrix
setinverse <- function(solve) solved <<- solve
getinverse <- function() solved
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheMatrix <- function(x, ...) {
solved <- mat$getinverse()
if(!is.null(solved)) {
message("getting cached data")
return(solved)
}
data <- mat$get()
solved <- solve(data, ...)
mat$setinverse(solved)
solved
}
cacheMatrix(mat)
inv <-makeMatrix(vec)
cacheMatrix(mat)
makeMatrix <- function(x = numeric()) {
mat <<- matrix(x, 3)                     #creates the matrix
solved <- NULL                          #sets the inverse matrix to zero
set <- function(y) {                    #creates a new matrix with new input dta x
x <<- y
solved <- NULL                  #sets the inverse matrix to zero
mat <- matrix(x, 3)             #creates the matrix
}
get <- function() mat                    #gets the matrix
setinverse <- function(solve) solved <<- solve
getinverse <- function() solved
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheMatrix <- function(x, ...) {
solved <- x$getinverse()
if(!is.null(solved)) {
message("getting cached data")
return(solved)
}
data <- mat$get()
solved <- solve(data, ...)
mat$setinverse(solved)
solved
}
inv <-makeMatrix(vec)
cacheMatrix(mat)
solved <- mat$getinverse()
makeMatrix <- function(x = numeric()) {
mat <<- matrix(x, 3)                     #creates the matrix
solved <- NULL                          #sets the inverse matrix to zero
set <- function(y) {                    #creates a new matrix with new input dta x
x <<- y
solved <- NULL                  #sets the inverse matrix to zero
mat <- matrix(x, 3)             #creates the matrix
}
get <- function() mat                    #gets the matrix
setinverse <- function(solve) solved <<- solve
getinverse <- function() solved
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheMatrix <- function(mat, ...) {
solved <- mat$getinverse()
if(!is.null(solved)) {
message("getting cached data")
return(solved)
}
data <- mat$get()
solved <- solve(data, ...)
mat$setinverse(solved)
solved
}
inv <-makeMatrix(vec)
cacheMatrix(mat)
cacheMatrix(mat)
cacheMatrix(mat)
cacheMatrix(mat)
makeMatrix <- function(mat)) {
solved <- NULL                          #sets the inverse matrix to zero
set <- function(y) {                    #creates a new matrix with new input dta x
x <<- y
solved <- NULL                  #sets the inverse matrix to zero
}
get <- function() mat                    #gets the matrix
setinverse <- function(solve) solved <<- solve
getinverse <- function() solved
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheMatrix <- function(mat, ...) {
solved <- mat$getinverse()
if(!is.null(solved)) {
message("getting cached data")
return(solved)
}
data <- mat$get()
solved <- solve(data, ...)
mat$setinverse(solved)
solved
}
mat <- matrix(1:9,3)
makeMatrix(mat)
makeMatrix(mat)
spcmat<- makeMatrix(mat)
spcmat$getinverse
smpat$getinverse
spcat$getinverse
spcmat$getinverse
spcmat$getinverse
cacheMatrix(spcmat)
cacheMatrix(spcmat)
mat <- matrix(c(1,43,5,6,2,5,6,32,4),3)
makeMatrix(mat)
spcmat<-makeMatrix(mat)
cacheMatrix(spcmat)
cacheMatrix(spcmat)
cacheMatrix(spcmat)
cacheMatrix(spcmat)
mat <- matrix(c(1,43,5,6,2,5,6,32,10),3)
cacheMatrix(mat)
cacheMatrix(mat)
cacheMatrix(mat)
clear
clearsp
cler()
clear()
clear()
clear()
lm()
ls()
spcmat
spcmat
ls()
mat
mat
spcmat <-(mat)
spcmat$getinverse
spcmat$getinverse()
mat$getinverse()
spcmat$getinverse()
spcmat$setinverse
spcmat$setinverse()
spcmat$setinverse(mat)
spcmat$setinverse(spcmat$get)
spcmat$get
spcmat$get
spcmat$get
spcmat$get
spcmat$get(mat)
spcmat$get
spcmat$get
cacheMatrix(spcmat)
cacheMatrix(mat)
cacheMatrix(mat)
cacheMatrix(mat)
cacheMatrix(mat)
makeMatrix <- function(mat)) {
solved <- NULL                          #sets the inverse matrix to zero
set <- function(y) {                    #creates a new matrix with new input dta x
x <<- y
solved <- NULL                  #sets the inverse matrix to zero
}
get <- function() mat                    #gets the matrix
setinverse <- function(solve) solved <<- solve
getinverse <- function() solved
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheMatrix <- function(mat, ...) {
solved <- mat$getinverse()
if(!is.null(solved)) {
message("getting cached data")
return(solved)
}
data <- mat$get()
solved <- solve(data, ...)
mat$setinverse(solved)
solved
}
cacheMatrix(mat)
vec<-makeMatrix(mat)
vec$getinverse
vec$setinverse
vec$get
vec$get()
vec$setiverse()
vec$setinverse()
vec$setinverse(vec$get())
vec$getinverse()
vec$setinverse(vec$get())
cacheMatrix(vec)
cacheMatrix(vec)
vec$set(mat1)
chaceMatrix(vec)
cacheMatrix(vec)
makeMatrix <- function(mat)) {
solved <- NULL                          #sets the inverse matrix to zero
set <- function(y) {                    #creates a new matrix with new input dta x
mat <<- y
solved <- NULL                  #sets the inverse matrix to zero
}
get <- function() mat                    #gets the matrix
setinverse <- function(solve) solved <<- solve
getinverse <- function() solved
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheMatrix <- function(mat, ...) {
solved <- mat$getinverse()
if(!is.null(solved)) {
message("getting cached data")
return(solved)
}
data <- mat$get()
solved <- solve(data, ...)
mat$setinverse(solved)
solved
}
vec
vec$set(mat1)
cacheMatrix(vec)
mat`
mat1
mat1
>
mat1
mat
cacheMatrix(mat)
cacheMatrix(vec)
